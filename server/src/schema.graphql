type Query {
  channelLeaderboard(where: ChannelWhere): Boolean
}

type Mutation {
  sendKudos(data: SendKudosInput): SendKudosPayload
}

# Input

input ChannelWhere {
  channelId: String
}

input CreateWorkspaceInput {
  members: [MemberInput!]!
}

input MemberInput {
  foo: String
}

input SendKudosInput {
  foo: String
}

# Payloads

type SendKudosPayload {
  success: Boolean!
}

# Types

# type Workspace {
#   id: ID!
#   slackId: String!
#   name: String!
#   members: [Member!]!
#   channels: [Channel!]!
# }

type Channel {
  id: ID!
  slackId: String!
  name: String!
  members: [Member!]!
  organiseCompetition: Boolean!
  sendEngagementMessages: Boolean!
}

type Member {
  id: ID!
  slackId: String!
  name: String!
  picture: String!

  kudosSent: [Kudo!]!
  kudosReceived: [Kudo!]!
}

type Kudo {
  id: ID!
  sentBy: Member!
  receivedBy: Member!
  message: String
}
