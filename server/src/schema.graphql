scalar DateTime

type Query {
  channelLeaderboard(
    slackId: String!
    timePeriod: LeaderboardTimeperiod!
  ): LeaderboardPayload!
}

enum LeaderboardTimeperiod {
  LAST_WEEK
  LAST_MONTH
  LAST_YEAR
}

enum LeaderboardOrder {
  BEST_OVERALL
  MOST_GIVEN_FIRST
  MOST_RECIEVED_FIRST
}

type Mutation {
  createWorkspace: CreateWorkspacePayload!
  createConversation(
    slackId: String!
    settings: ConversationSettingsInput!
  ): Conversation!
  updateConversation(
    slackId: String!
    settings: ConversationSettingsInput!
  ): Conversation!
  deleteConversation(slackId: String!): Conversation!
  # Kudos
  sendKudos(data: SendKudoInput): Kudo
  publishKudos(id: ID!): Kudo
}

# Inputs

input ConversationSettingsInput {
  organiseCompetition: Boolean!
  sendEngagementMessages: Boolean!
}

input SendKudoInput {
  senderSlackId: String!
  recipientSlackId: String!
  conversationSlackId: String!
  message: String
}

# Payloads

type CreateWorkspacePayload {
  success: Boolean!
}

type LeaderboardPayload {
  topReceivers: [LeaderboardMember]!
  topSenders: [LeaderboardMember]!
  topScorers: [LeaderboardMember]!
}

# Types

type Conversation {
  id: ID!
  slackId: String!
  organiseCompetition: Boolean!
  sendEngagementMessages: Boolean!
}

type Member {
  id: ID!
  slackId: String!
  kudosSent: [Kudo!]!
  kudosReceived: [Kudo!]!
  receiveNotifications: Boolean!
}

type Kudo {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  # Meta
  sentBy: Member!
  receivedBy: Member!
  sentInConversation: Conversation!

  message: String
  public: Boolean!
}

type LeaderboardMember {
  slackId: String!
  score: Int!
}

# type KudoResponse {
#   id: ID! @unique
#   createdAt: DateTime!
#   updatedAt: DateTime!

#   gif: String
#   message: String
# }
